import { db } from '../src/db';
import { PayoutService } from '../src/services/payout.service';

console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç...\n');

async function createTestPayouts() {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ä—á–∞–Ω—Ç–∞
    const merchant = await db.merchant.findUnique({
      where: { token: 'test-payout-merchant' }
    });

    if (!merchant) {
      console.log('‚ùå –ú–µ—Ä—á–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const payoutService = PayoutService.getInstance();
    
    // –°–æ–∑–¥–∞–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–ø–ª–∞—Ç
    const testPayouts = [
      {
        amount: 1500,
        wallet: '+79001234567',
        bank: '–°–±–µ—Ä–±–∞–Ω–∫ –°–ë–ü',
        isCard: false,
      },
      {
        amount: 3000,
        wallet: '2202 **** **** 1234',
        bank: '–°–±–µ—Ä–±–∞–Ω–∫',
        isCard: true,
      },
      {
        amount: 2500,
        wallet: '+79007654321',
        bank: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –°–ë–ü',
        isCard: false,
      },
      {
        amount: 4000,
        wallet: '5536 **** **** 5678',
        bank: '–¢–∏–Ω—å–∫–æ—Ñ—Ñ',
        isCard: true,
      },
      {
        amount: 1000,
        wallet: '+79005555555',
        bank: '–í–¢–ë –°–ë–ü',
        isCard: false,
      },
    ];

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç:');
    
    for (let i = 0; i < testPayouts.length; i++) {
      const payoutData = testPayouts[i];
      const rate = 95 + Math.random() * 10; // –∫—É—Ä—Å –æ—Ç 95 –¥–æ 105
      
      const payout = await payoutService.createPayout({
        merchantId: merchant.id,
        amount: payoutData.amount,
        wallet: payoutData.wallet,
        bank: payoutData.bank,
        isCard: payoutData.isCard,
        rate,
        processingTime: 15,
        webhookUrl: 'http://localhost:3000/webhook/test',
        metadata: {
          testPayout: true,
          createdBy: 'create-test-payouts',
          batchId: Date.now(),
        }
      });

      console.log(`‚úÖ –í—ã–ø–ª–∞—Ç–∞ #${payout.numericId}: ${payout.amount}‚ÇΩ - ${payout.wallet} (${payout.bank})`);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalPayouts = await db.payout.count();
    const activePayouts = await db.payout.count({ where: { status: 'CREATED' } });
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç: ${totalPayouts}`);
    console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç: ${activePayouts}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å —Ç—Ä–µ–π–¥–µ—Ä–∞
    const trader = await db.user.findUnique({
      where: { email: 'payout-trader@test.com' }
    });

    if (trader) {
      console.log(`\nüë§ –¢—Ä–µ–π–¥–µ—Ä (${trader.email}):`);
      console.log(`–ë–∞–ª–∞–Ω—Å –≤—ã–ø–ª–∞—Ç: ${trader.payoutBalance}‚ÇΩ`);
      console.log(`–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${trader.frozenPayoutBalance}‚ÇΩ`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log('Email —Ç—Ä–µ–π–¥–µ—Ä–∞: payout-trader@test.com');
    console.log('–ü–∞—Ä–æ–ª—å: payout123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç:', error);
  }
}

createTestPayouts()
  .then(() => process.exit(0))
  .catch(() => process.exit(1));
name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-backend:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: chase_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: bun install
      
      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate
      
      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/chase_test
      
      - name: Clean test database
        working-directory: ./backend
        run: |
          npx prisma migrate reset --force --skip-seed
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/chase_test
      
      - name: Run backend tests
        working-directory: ./backend
        run: |
          # Run only passing tests
          bun test tests/trader.test.ts tests/merchant.test.ts tests/user.test.ts tests/freezing-simple.test.ts
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/chase_test
          JWT_SECRET: test-secret
          NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: https://chasepay.pro

  deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Copy installation script to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "scripts/install-dependencies.sh"
          target: "${{ secrets.PROJECT_PATH }}"
      
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            
            # Navigate to project directory
            cd ${{ secrets.PROJECT_PATH }}
            
            # Run installation script first
            echo "Installing dependencies..."
            chmod +x scripts/install-dependencies.sh
            ./scripts/install-dependencies.sh
            
            # Stop existing containers first
            docker-compose -f docker-compose.prod.yml down || true
            
            # Pull latest changes
            git fetch origin
            git reset --hard origin/main
            
            # Create .env file for production
            cat > .env << 'EOF'
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SUPER_ADMIN_KEY=${{ secrets.SUPER_ADMIN_KEY }}
            ADMIN_IPS=${{ secrets.ADMIN_IPS }}
            NODE_ENV=production
            EOF
            
            # Ensure SSL certificates are in place
            mkdir -p ssl
            
            # Remove old containers and images
            docker-compose -f docker-compose.prod.yml rm -f
            docker image prune -af
            
            # Build and start new containers (using prod config without local postgres)
            docker-compose -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30
            
            # Run database migrations
            echo "Running database migrations..."
            docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy || {
              echo "Migration failed, retrying..."
              sleep 10
              docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy
            }
            
            # Verify all services are running
            echo "Verifying services..."
            if ! docker ps | grep -q "chase_backend"; then
              echo "ERROR: Backend container is not running!"
              docker-compose logs backend
              exit 1
            fi
            
            if ! docker ps | grep -q "chase_frontend"; then
              echo "ERROR: Frontend container is not running!"
              docker-compose logs frontend
              exit 1
            fi
            
            if ! docker ps | grep -q "chase_nginx"; then
              echo "ERROR: Nginx container is not running!"
              docker-compose -f docker-compose.prod.yml logs nginx
              exit 1
            fi
            
            # Show final status
            docker-compose -f docker-compose.prod.yml ps
            
            # Clean up disk space
            docker system prune -af
            
            echo "âœ… Deployment completed successfully!"